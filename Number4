import java.util.Scanner;

class Question4 {
  
/* Global declarations */
/* Variables */
int charClass;
char lexeme[];
char nextChar;
int lexLen;
int token;
int nextToken;

final static int LETTER =   0;
final static int DIGIT =   1;
final static int UNKNOWN =   99;
final static int INT_LIT = 10;
final static int IDENT = 11;
final static int ASSIGN_OP = 20;
final static int ADD_OP = 21;
final static int SUB_OP = 22;
final static int MULT_OP = 23;
final static int DIV_OP = 24;
final static int LEFT_PAREN = 25;
final static int RIGHT_PAREN = 26;

  
  public static void main(String[] args) {

    Scanner n=new Scanner(System.in);
    String input;
    int counter=0;

    while(n.hasNextLine())
    {
        input=n.nextLine();
        char[] charInput=input.toCharArray();
        for (int i = 0; i < input.length(); i++) {
            if(charInput[i]=='"')
            {
                if(counter%2==0)
                {
                    System.out.print("``");
                }
                else
                {
                    System.out.print("''");
                }
                counter++;
            }
            else
            {
                System.out.print(charInput[i]);
            } 
        }
        System.out.print("\n");
    }
    
//READ FILE 

  }



  public int lookup(char ch) {
    switch(ch) {
      case '(':
        addChar();
        nextToken = LEFT_PAREN;
        break;

      case ')':
        addChar();
        nextToken = RIGHT_PAREN;
        break;

      case '+':
        addChar();
        nextToken = ADD_OP;
        break;

      case '-':
        addChar();
        nextToken = SUB_OP;
        break;
      case '/':
			  addChar();
			  nextToken = DIV_OP;
			  break;
		 
     default:
			 addChar();
			 nextToken = EOF;
			 break;
	 }
	 return nextToken; }
  




public void addChar() {
  if (lexLen <= 98) {
      lexeme[lexLen++] = nextChar;
      lexeme[lexLen] = '\0';

  } else 
  System.out.println("Error - lexeme is too long");
}
  

public void getChar() {
        Scanner fileScanner;
		if (fileScanner.hasNext()) {
            nextChar = fileScanner.next().charAt(0);
            if (Character.isLetter(nextChar))
                charClass = LETTER;
            else if (Character.isDigit(nextChar))
                charClass = DIGIT;
            else
                charClass = UNKNOWN;
        } else {
            charClass = EOF;
        }
    }


public void getNonBlank() {
  while (isspace(nextChar))
    getChar();
}


public void lex() {
  lexLen = 0;
  getNonBlank();
  switch (charClass) {
    case LETTER:
      addChar();
      getChar();
      while (charClass == LETTER || charClass == DIGIT) {
        addChar();
        getChar();
      }
      nextToken = IDENT;
      break;

    case DIGIT:
      addChar();
      getChar();
      while (charClass == DIGIT) {
        addChar();
        getChar();
      }
      nextToken = INT_LIT;
      break;

    case UNKNOWN:
      lookup(nextChar);
      getChar();
      break;
    case EOF: 
      nextToken = EOF;
      lexeme[0] = 'E';
      lexeme[1] = 'O';
      lexeme[2] = 'F';
      lexeme[3] = '\0';
      break;
  }

  System.out.print("Next token is: " + nextToken + ", Next lexeme is: " + lexeme);
}




public void expr() {
  System.out.println("Enter <expr>\n");
  term();

  while (nextToken == ADD_OP || nextToken == SUB_OP) {
    lex();
    term();
  }

  System.out.println("Exit <expr>\n");
}

public void term() {
  System.out.println("Enter <term>\n");
  factor();

  while(nextToken == MULT_OP || nextToken == DIV_OP) {
    lex();
    factor();
  }

  System.out.println("Exit <term>\n");
}

public void factor() {
  System.out.println("Enter <factor>\n");

  if(nextToken == LEFT_PAREN) {
    lex();
    expr();
    if (nextToken == RIGHT_PAREN)
      lex();
    else Error;
  }
  else error();

  System.out.println("Exit <factor>\n");
}




}
